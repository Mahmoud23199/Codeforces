#include<bits/stdc++.h>
using namespace std;
int main()
{
    int t,n;
    int aa[100000];
    cin>>t;
    while(t--)
    {
        int d=0,rem=0;
        cin>>n;
        if(n >= 1000){
            rem=n%1000;
            aa[d++]=n-rem;
            n%=1000;
        }
        if(n >= 100){
            rem=n%100;
            aa[d++]=n-rem;
            n%=100;
        }
        if(n >= 10){
            rem=n%10;
            aa[d++]=n-rem;
            n%=10;
        }
        if(n<10 && n>0){
            aa[d++]=n;
        }
        vector<int>va;
        for(int i=0; i<d; i++){
            va.push_back(aa[i]);
        }
        cout<<va.size()<<endl;
        for(int i=0; i<va.size(); i++){
            cout<<va[i]<<" ";
        }
        cout<<endl;
    }
}

//c# code
/*
using System;
using System.Collections;
using System.Linq;
using System.Text;

namespace ProblemSolveingRound
{
    class Program
    {
        static void Main(string[] args)
        {
           
            int number_test =Convert.ToInt32(Console.ReadLine());
            int[]arr_display=new int[number_test*100];
            Queue myq=new Queue();
            int rem = 0;
            for (int i = 0; i < number_test; i++)
            {
                int number = Convert.ToInt32(Console.ReadLine());
                int temp = 0;
                if (number == 10000)
                {
                    temp++;
                    myq.Enqueue(number);
                    
                }
                else
                {
                    if (number >= 1000)
                    {
                        rem = number % 1000;
                        myq.Enqueue(number - rem);
                        number = number % 1000;
                        temp++;
                    }
                    if (number >= 100)
                    {
                        rem = number % 100;
                        myq.Enqueue(number - rem);
                        number = number % 100;
                        temp++;
                    }
                    if (number > 10)
                    {
                        rem = number % 10;
                        myq.Enqueue(number - rem);
                        number = number % 10;
                        temp++;
                    }
                    if (number <= 10)
                    {

                        myq.Enqueue(number);
                        temp++;
                    }
                    
                }
                arr_display[i] = temp;
            }
            for (int i = 0; i < number_test; i++)
            {
                Console.WriteLine(arr_display[i]);
                for (int j = 0; j < arr_display[i]; j++)
                {
                    Console.Write($"{myq.Dequeue()} ");

                }
                Console.WriteLine();
            }
        }
    }





    
}
*/
